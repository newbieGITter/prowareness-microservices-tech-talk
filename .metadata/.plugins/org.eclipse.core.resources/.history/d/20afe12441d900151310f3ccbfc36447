package com.prowareness.example.controller;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.prowareness.example.domain.ProductDetail;
import com.prowareness.example.exception.ProductDetailsAlreadyExistsException;
import com.prowareness.example.exception.ProductNotFoundException;
import com.prowareness.example.service.ProductDetailService;
import com.prowareness.example.validator.ProductDetailValidator;

@RestController
@RequestMapping("/products")
public class ProductDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductDetailController.class);
    private final ProductDetailService productDetailService;
    private final ProductDetailValidator validator;

    @Autowired
    public ProductDetailController(ProductDetailService productDetailService, ProductDetailValidator validator) {
        this.productDetailService = productDetailService;
        this.validator = validator;
    }

    @InitBinder
    protected void initBinder(WebDataBinder binder) {
        binder.addValidators(validator);
    }
    
    @RequestMapping(method = RequestMethod.POST, consumes = "application/json")
    public ProductDetail createPrductDetail(@RequestBody @Valid final ProductDetail productDetail) {
        LOGGER.debug("Received request to create the {}", productDetail);
        return productDetailService.save(productDetail);
    }

    @RequestMapping(method = RequestMethod.GET)
    public List<ProductDetail> listAllProductDetails() {
        LOGGER.debug("Received request to list all users");
        return productDetailService.getAllProductDetail();
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public List<ProductDetail> listAllProductDetailsWithPagination(@RequestParam(value = "page", defaultValue = "0", required = false) int page,
            @RequestParam(value = "count", defaultValue = "10", required = false) int count,
            @RequestParam(value = "order", defaultValue = "ASC", required = false) Sort.Direction direction,
            @RequestParam(value = "sort", defaultValue = "productName", required = false) String sortProperty) {
        LOGGER.debug("Received request to list all users");
        //Page<ProductDetail> result = productDetailRepository.findAll(new PageRequest(page, count, new Sort(direction, sortProperty)));
        Page<ProductDetail> productDetailsPage = productDetailService.getAllProductDetail(new PageRequest(page, count, new Sort(direction, sortProperty)));
        return productDetailsPage.getContent();
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ProductDetail find(@PathVariable String id) {
        ProductDetail detail = productDetailService.getProductDetail(id);
        if (detail == null) {
            throw new ProductNotFoundException("Product with product id: " + id + " not found");
        } else {
            return detail;
        }
    }

    @ExceptionHandler
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public String handleProductNotFoundException(ProductNotFoundException e) {
        return e.getMessage();
    }

}
