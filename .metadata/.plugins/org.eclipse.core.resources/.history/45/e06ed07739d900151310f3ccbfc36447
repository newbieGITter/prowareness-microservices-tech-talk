package com.prowareness.example.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.prowareness.example.domain.ProductDetail;
import com.prowareness.example.domain.User;
import com.prowareness.example.exception.UserAlreadyExistsException;
import com.prowareness.example.repository.ProductDetailRepository;
import com.prowareness.example.repository.UserRepository;

import javax.inject.Inject;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Service
@Validated
public class ProductDetailServiceImpl implements UserService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductDetailServiceImpl.class);
    private final ProductDetailRepository repository;

    @Inject
    public ProductDetailServiceImpl(final ProductDetailRepository repository) {
        this.repository = repository;
    }

    @Override
    @Transactional
    public ProductDetail save(@NotNull @Valid final ProductDetail productDetail) {
        LOGGER.debug("Creating {}", productDetail);
        ProductDetail existing = repository.findOne(productDetail.getProductId());
        if (existing != null) {
            throw new UserAlreadyExistsException(
                    String.format("There already exists a product with id=%s", productDetail.getProductId()));
        }
        return repository.save(productDetail);
    }

    @Override
    @Transactional(readOnly = true)
    public List<User> getList() {
        LOGGER.debug("Retrieving the list of all users");
        return repository.findAll();
    }

}
