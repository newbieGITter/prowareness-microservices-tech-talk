package com.prowareness.example.service;

import java.util.List;

import javax.inject.Inject;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.prowareness.example.domain.ProductDetail;
import com.prowareness.example.exception.ProductDetailsAlreadyExistsException;
import com.prowareness.example.exception.ProductNotFoundException;
import com.prowareness.example.repository.ProductDetailRepository;

@Service
@Validated
public class ProductDetailServiceImpl implements ProductDetailService {

	private static final Logger LOGGER = LoggerFactory.getLogger(ProductDetailServiceImpl.class);
	private final ProductDetailRepository repository;

	@Inject
	public ProductDetailServiceImpl(final ProductDetailRepository repository) {
		this.repository = repository;
	}

	@Override
	@Transactional
	public ProductDetail save(@NotNull @Valid final ProductDetail productDetail) {
		LOGGER.debug("Creating {}", productDetail);
		ProductDetail existing = repository.findOne(productDetail.getProductId());
		if (existing != null) {
			throw new ProductDetailsAlreadyExistsException(
					String.format("There already exists a product with id=%s", productDetail.getProductId()));
		}
		return repository.save(productDetail);
	}

	@Override
	@Transactional(readOnly = true)
	public List<ProductDetail> getAllProductDetail() {
		LOGGER.debug("Retrieving the list of all product details");
		return (List<ProductDetail>) repository.findAll();
	}

	@Override
	@Transactional(readOnly = true)
	public Page<ProductDetail> getAllProductDetail(PageRequest pageRequest) {
		LOGGER.debug("Retrieving the list of all product details for pageRequest");
		return repository.findAll(pageRequest);
	}

	@Override
	@Transactional(readOnly = true)
	public ProductDetail getProductDetail(String id) throws ProductNotFoundException {
		LOGGER.debug("Retrieving product details based on id");
		ProductDetail productDetail = repository.findOne(id);
		if (productDetail == null) {
			throw new ProductNotFoundException("Product with product id: " + id + " not found");
		}
		return productDetail;
	}

	@Override
	@Transactional
	public void deleteProductDetail(String id) {
		LOGGER.debug("deleting product detail with id: " + id);
		ProductDetail productDetail = this.getProductDetail(id);
		if (productDetail == null) {
			throw new ProductNotFoundException("Product with product id: " + id + " not found");
		}
		repository.delete(productDetail);
	}
}
